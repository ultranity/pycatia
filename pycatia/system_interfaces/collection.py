#! usr/bin/python3.9
"""
Module initially auto generated using V5Automation files from CATIA V5 R28 on 2020-06-10 10:58:07.270911

.. warning::
    The notes denoted "CAA V5 Visual Basic Help" are to be used as reference only.
    They are there as a guide as to how the visual basic / catscript functions work
    and thus help debugging in pycatia.

"""

from typing import Generic, Iterator, TypeVar

from pycatia.system_interfaces.any_object import AnyObject

# from pycatia.system_interfaces.cat_base_dispatch import CATBaseDispatch

T = TypeVar("T", bound=AnyObject)


#TODO: can use Generic after py312
class Collection(AnyObject, Generic[T]):
    """
    .. note::
        :class: toggle

        CAA V5 Visual Basic Help (2020-06-10 10:58:07.270911)

            | System.IUnknown
            |     System.IDispatch
            |         System.CATBaseUnknown
            |             System.CATBaseDispatch
            |                 Collection
            |
            | Represents the base object for collections.
            | As a base object, it provides properties and methods shared by any other
            | object.

    """


    def __init__(self, com_object, child_object=T):
        super().__init__(com_object)
        self.child_object = child_object

    @property
    def count(self) -> int:
        """
        .. note::
            :class: toggle

            CAA V5 Visual Basic Help (2020-06-10 10:58:07.270911)
                | o Property Count() As long (Read Only)
                |
                |     Returns the number of objects in the collection. This is handy to scan all
                |     the objects in a collection.
                |
                |     Example:
                |         This example retrieves in ObjectNumber the number of objects currently
                |         gathered in MyCollection.
                |
                |          ObjectNumber = MyCollection.Count

        :rtype: int
        """
        # if self.com_object is None:
        #     return 0
        return self.com_object.Count

    def get_item(self, id_name: str) -> T:
        """

        .. note::
            :class: toggle

            CAA V5 Visual Basic Help (2020-06-10 10:58:07.270911))
                | o Func GetItem(CATBSTR IDName) As CATBaseDispatch
                |
                |     Returns an object from its name.
                |     Role: To retrieve an object when only its name is available. You should not
                |     use this method, but you can find it in the macros generated by the
                |     Tools->Macro command.
                |
                |     Parameters:
                |
                |         IDName
                |             The searched object name
                |
                |     Returns:
                |         The searched object

        :param str id_name:
        :rtype: AnyObject
        """

        return self.child_object(self.com_object.GetItem(id_name))

    def get_item_by_index(self, index):
        """
        :param str/int index: relation name or index
        :return: child_object
        """

        return self.child_object(self.com_object.Item(index))

    def get_item_names(self):
        names = []
        for i in range(self.com_object.Count):
            name = self.com_object.Item(i + 1).Name
            names.append(name)

        return names

    def get_item_by_name(self, name):
        for i in range(self.com_object.Count):
            if self.com_object.Item(i + 1).Name == name:
                return self.child_object(self.com_object.Item(i + 1))

        return None

    def items(self):
        """
        :return: [self.child_object()]
        """
        return list(self)

    def __len__(self):
        return self.count

    def __getitem__(self, n: int) -> T:
        if n < 0:
            n += self.count
            if n < 0:
                raise StopIteration
        if (n + 1) > self.count:
            raise StopIteration

        return self.child_object.new(self.com_object.Item(n + 1))

    def __iter__(self) -> Iterator[T]:
        for i in range(self.count):
            yield self.child_object.new(self.com_object.Item(i + 1))

    def __repr__(self):
        return f'{self.__class__.__name__}(name="{self.name}", n={self.count})'

    def to_dict(self):
        return [item.to_dict() for item in self]
        # return {
        #     'count': self.count,
        #     'type': self.__class__.__name__,
        #     'name': self.name,
        #     'items': [item.to_dict() for item in self],
        # }
